from pyadtn.utils import *
from nacl.utils import random
from nacl.secret import SecretBox


def test_Xcryption():
    msg = b'hello'
    key = random(SecretBox.KEY_SIZE)
    enc = encrypt(msg, key)
    dec = decrypt(enc, key)
    assert msg == dec


def test_conversion():
    hello = b'hello'
    assert s2b(b2s(hello)) == hello


def test_hex_string_to_bytes():
    input = '123cf'
    output = b'123cf'
    assert hex_string_to_bytes(input) == output


def test_mac_addr_conversion():
    input = '01:23:45:67:89:ab'
    output = b'0123456789ab'
    assert mac_address_to_bytes(input) == output


def test_mac_generator():
    mac = random_mac_address()
    digits = '0123456789abcdef'
    assert len(mac) == 17
    for i in range(17):
        if i % 3 == 2:
            assert mac[i] == ':'
        else:
            assert mac[i] in digits


# def test_fcs_calculation():
#     input0 = b'08000000ffffffffffff0025d38c08634af29eb3c2c96000' + b'aaaa03000000cafe' + b'063230f6bcbbc0699a423dcecd01dc5d81ee9d81de706f23eb5ec8c67a49d32bb1520e8deba9fab367ef7280e1cbc499eddc1d57743f290caae0fc959546f88f1af7c4a89b30baefa3ac404664e8d35ea7a772fe32ae5861ef4aa286993d9bb63ed44d6bab2b72542a727f8aa0548bf4ab90a9f04212dc20b643c6fe1902142cd260863c24de5709dd5d125ceafb76a92f85f90fac3657fdb30a4f2ce8a1ffef649eae88a31d5052e6f837d85c2b06ec06de106608520786dba324edf1d03a588a84c7b2dddb5f8e989c0fd3c72c90cd66216d3de928c8dd2a5482abf46bdf81aeb0e38c3aca9c6807864dced178236d5343e0faf996a36f281fafc7e1f2e2f15b36e13f6aae2fb555c415a1900f25c33d47f33437117649ccaba6ae2ca40ed6bde5a032fec9fb1c9fef24b97e7bc8620e52d292fdb6455159418c88a7c620e7bc640fcd50bef21624376e8c3eee967639359e3af64bea422719ab6204095a214aa5924055ba632ebc299255065a92820f82c69f6ef8009407fe4214fca301c4908c0823f2f9aff3e5e8a08fc5585c46d7a7b0dca8040757b38f57fa17225f031ed276a184b0a5fdeacfcf7ffd829f0fd99e139ec182b5cc634fb9dffe31499941f7ba72ce22dfa105b0b0994d44ceb0be33cf9e71d6ee406dc8ef7214ca1273bf21304f20316133862de6a735c07468ba1982ec07776cde3001aa938247e62585d45fba68275d3680f05e0088dff45c5707b70f53aba5878727828bc2f23f0a9b288911cc192585708e4347a0147ec7a6df3d46b120b6a627b0f15d4ae9da4bf843f4e7785b62efe749911783a3b1be78fff4e953e37f04601c3f72f32bf1c0e37d8a52733b8049b83af2d502d56ab4d7b2f3caa5ebccc1df0a88b6f218c37b3d6b7616de24428d65b876300f0bd17101044c60c3db0c5c73bf5e2776fc1262c9d38d1f9349d5b1e42a121609f9eaabba105484e5147d170c399b03eacf276a1eeefbd328c05122102826c94368741beadb97d674ddd91a67969d152f52cab72e07b93d313160b78d8282c43e3835af302eb89b5cc6aa9d8141e1e7259df617ed6f89e906948f58c520ee86c67d402ce5e01dc8341de619e115b26b2c61d9e09fa99dfc786422d5f2caef1d65b8675c03a2b01ee99c197eb49094eff96eb8d7a15aa58420801219d4d19e441cd7554358c0ed5de0dfdf8ac37df2ba956f570c52c19fd921adeaa8792501c763badefb584929055d2d7af619d1d3991021ab94703f0fba840f17c18aaf1bc048831fa37d682ec870b1c16399abb62824ca6045c34a9da1fc5059f5d5b9e59e99d208ad76ed6d347711dc6189ea88bf62506776bb06f843416bf2b8c4e29a6e30ad7f05d6fe160fd9879adee264cff3eb921c960a97718e9e7b0ae59da810317fb7e6501b3754f1952f39ef69dc324adbfba447e42c387fde00e985656635aba79163d8d7358c341d4b8b0a423dd8551d3997ff00380197d4bd36966e0416ffdb94e2107a8e6822521504ede82437c4eab1dcf0780a553628cb031c0fd793564ecd506d0661cffb00b95152b638f8f21f25e593733c1000bf776384165ad6f5d3cca022be4bada6fa315bdf28c5a075d259d2a187db31896ca89a09d9cba28852c7aceb099c91ed00c4c4745f9a9d75f6c81f73260577835194b5da5ac61c5429ed16119a38873f90fef97d32027bbb92a343a1c52e09cabed80a1f45f9fcf08fe480f7b3103eab4ddf222fcbad51d95bc129d73d227e78aecdc2132b38894a88e063b2439274281e9ae4c88e17c3e8dffeec7e885ff9d7fbfe7855a3a0fe2ab928b01921bd281866b9339d2d292ed169301a773e6c8493ea9bbc12132f979777223149b0757e66ec1d5c6b82da9e5330694d862fad482b76659977a5b87b30fc463a09b65cfccf7f4a6db3d447a256e1dbd6b0abb8daa9d390168d5d281d229445137c20163410f6d67e4f10c5fa851450c68ce0f79c386ae3f18d19a86bd12b268b18e5e18283d76794e452a103e866a3e8501df0441aa200415d27ad1cc03510bffd67b54685c15cc7c89eec6dbcb24fe8b86f66b45fb0190737734efea878e0f30afb955adf670a45fcc9dbf2a0'
#     output0 = int(b'4bd647d8', 16)
#     assert calculate_fcs(input0) == output0
